{"ast":null,"code":"import _classCallCheck from \"/Users/kevinfoesenek/Desktop/Linked_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kevinfoesenek/Desktop/Linked_frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kevinfoesenek/Desktop/Linked_frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kevinfoesenek/Desktop/Linked_frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kevinfoesenek/Desktop/Linked_frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from \"react\"; // nodejs library that concatenates classes\n\nimport classNames from \"classnames\";\nvar web3 = \"\";\n\nvar Web3set =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Web3set, _React$Component);\n\n  function Web3set(props) {\n    var _this;\n\n    _classCallCheck(this, Web3set);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Web3set).call(this, props));\n    _this.state = {\n      web3Available: \"false\",\n      coinbase: \"0x\",\n      balance: \"0,00\"\n    };\n    return _this;\n  }\n\n  _createClass(Web3set, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (window.ethereum) {\n        web3 = new Web3(window.ethereum);\n\n        try {\n          window.ethereum.enable().then(console.log(\"web3 full set\"), this.setState({\n            web3Available: \"true\"\n          }));\n        } catch (e) {\n          console.log(\"web3 blocked\");\n        }\n      } // Legacy DApp Browsers\n      else if (window.web3) {\n          web3 = new Web3(window.web3.currentProvider);\n          this.setState({\n            web3Available: \"true\"\n          });\n        } // Non-DApp Browsers\n        else {\n            alert('Please install MetaMask !');\n          }\n    }\n  }]);\n\n  return Web3set;\n}(React.Component);\n\nexport default Web3set;","map":{"version":3,"sources":["/Users/kevinfoesenek/Desktop/Linked_frontend/src/components/web3/web3.jsx"],"names":["React","classNames","web3","Web3set","props","state","web3Available","coinbase","balance","window","ethereum","Web3","enable","then","console","log","setState","e","currentProvider","alert","Component"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,IAAIC,IAAI,GAAG,EAAX;;IAEMC,O;;;;;AACJ,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,iFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE,OADJ;AAEXC,MAAAA,QAAQ,EAAE,IAFC;AAGXC,MAAAA,OAAO,EAAE;AAHE,KAAb;AAFiB;AAOlB;;;;wCACmB;AAClB,UAAIC,MAAM,CAACC,QAAX,EAAqB;AACnBR,QAAAA,IAAI,GAAG,IAAIS,IAAJ,CAASF,MAAM,CAACC,QAAhB,CAAP;;AACA,YAAI;AACFD,UAAAA,MAAM,CAACC,QAAP,CAAgBE,MAAhB,GAAyBC,IAAzB,CACEC,OAAO,CAACC,GAAR,CAAY,eAAZ,CADF,EAEE,KAAKC,QAAL,CAAc;AAACV,YAAAA,aAAa,EAAE;AAAhB,WAAd,CAFF;AAID,SALD,CAKE,OAAMW,CAAN,EAAS;AACXH,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACC;AACF,OAVD,CAWA;AAXA,WAYK,IAAIN,MAAM,CAACP,IAAX,EAAiB;AACpBA,UAAAA,IAAI,GAAG,IAAIS,IAAJ,CAASF,MAAM,CAACP,IAAP,CAAYgB,eAArB,CAAP;AACA,eAAKF,QAAL,CAAc;AAACV,YAAAA,aAAa,EAAE;AAAhB,WAAd;AACD,SAHI,CAIL;AAJK,aAKA;AACHa,YAAAA,KAAK,CAAC,2BAAD,CAAL;AACD;AACF;;;;EA9BmBnB,KAAK,CAACoB,S;;AAkC5B,eAAejB,OAAf","sourcesContent":["import React from \"react\";\n// nodejs library that concatenates classes\nimport classNames from \"classnames\";\n\nlet web3 = \"\";\n\nclass Web3set extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      web3Available: \"false\",\n      coinbase: \"0x\",\n      balance: \"0,00\"\n    };\n  }\n  componentDidMount() {\n    if (window.ethereum) {\n      web3 = new Web3(window.ethereum);\n      try {\n        window.ethereum.enable().then(\n          console.log(\"web3 full set\"),\n          this.setState({web3Available: \"true\"})\n        )\n      } catch(e) {\n      console.log(\"web3 blocked\")\n      }\n    }\n    // Legacy DApp Browsers\n    else if (window.web3) {\n      web3 = new Web3(window.web3.currentProvider);\n      this.setState({web3Available: \"true\"});\n    }\n    // Non-DApp Browsers\n    else {\n      alert('Please install MetaMask !');\n    }\n  }\n}\n\n\nexport default Web3set;\n"]},"metadata":{},"sourceType":"module"}