{"ast":null,"code":"import _possibleConstructorReturn from \"/Users/kevinfoesenek/Desktop/Linked_frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kevinfoesenek/Desktop/Linked_frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kevinfoesenek/Desktop/Linked_frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/kevinfoesenek/Desktop/Linked_frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _regeneratorRuntime from \"/Users/kevinfoesenek/Desktop/Linked_frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kevinfoesenek/Desktop/Linked_frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/kevinfoesenek/Desktop/Linked_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kevinfoesenek/Desktop/Linked_frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport isEqual from 'lodash/isEqual';\nimport sortBy from 'lodash/sortBy';\nimport Web3 from 'web3';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    if (i % 2) {\n      var source = arguments[i] != null ? arguments[i] : {};\n      var ownKeys = Object.keys(source);\n\n      if (typeof Object.getOwnPropertySymbols === 'function') {\n        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n          return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n        }));\n      }\n\n      ownKeys.forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i]));\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar NOT_INSTALLED = \"MetaMask not installed\";\nvar MISSING_PROVIDER = \"Missing provider\";\nvar LOCKED = \"MetaMask is locked\";\nvar TIMEOUT = \"Timeout\";\nvar constants =\n/*#__PURE__*/\nObject.freeze({\n  NOT_INSTALLED: NOT_INSTALLED,\n  MISSING_PROVIDER: MISSING_PROVIDER,\n  LOCKED: LOCKED,\n  TIMEOUT: TIMEOUT\n});\n\nvar MetaMask =\n/*#__PURE__*/\nfunction () {\n  _createClass(MetaMask, null, [{\n    key: \"initialize\",\n    value: function () {\n      var _initialize = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _ref,\n            maxListeners,\n            instance,\n            provider,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _ref = _args.length > 0 && _args[0] !== undefined ? _args[0] : {\n                  maxListeners: 300\n                }, maxListeners = _ref.maxListeners;\n                _context.next = 3;\n                return MetaMask.getWeb3();\n\n              case 3:\n                instance = _context.sent;\n                provider = instance.currentProvider;\n                provider.setMaxListeners(maxListeners);\n                return _context.abrupt(\"return\", new MetaMask(provider));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function initialize() {\n        return _initialize.apply(this, arguments);\n      }\n\n      return initialize;\n    }()\n  }, {\n    key: \"hasWeb3\",\n    value: function hasWeb3() {\n      return typeof window !== \"undefined\" && Boolean(window.ethereum || window.web3);\n    }\n  }, {\n    key: \"getWeb3\",\n    value: function () {\n      var _getWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                // Modern dapp browsers\n                window.web3 = new window.Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                return _context2.abrupt(\"return\", window.web3);\n\n              case 7:\n                if (!window.web3) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                // Legacy dapp browsers...\n                window.web3 = new window.Web3(window.web3.currentProvider);\n                return _context2.abrupt(\"return\", window.web3);\n\n              case 12:\n                throw new Error(NOT_INSTALLED);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getWeb3() {\n        return _getWeb.apply(this, arguments);\n      }\n\n      return getWeb3;\n    }()\n  }]);\n\n  function MetaMask(provider) {\n    _classCallCheck(this, MetaMask);\n\n    if (!provider) {\n      throw new Error(MISSING_PROVIDER);\n    }\n\n    this.web3 = new Web3(provider);\n  }\n\n  _createClass(MetaMask, [{\n    key: \"getWeb3\",\n    value: function () {\n      var _getWeb2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.web3);\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getWeb3() {\n        return _getWeb2.apply(this, arguments);\n      }\n\n      return getWeb3;\n    }()\n  }, {\n    key: \"getAccounts\",\n    value: function () {\n      var _getAccounts = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var _this = this;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this.web3.eth.getAccounts(function (err, accounts) {\n                    if (err !== null) {\n                      reject(err);\n                    } else if (accounts.length === 0) {\n                      reject(new Error(LOCKED));\n                    } else {\n                      resolve(accounts);\n                    }\n                  });\n                }));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getAccounts() {\n        return _getAccounts.apply(this, arguments);\n      }\n\n      return getAccounts;\n    }()\n  }]);\n\n  return MetaMask;\n}();\n\nfunction isEqualArray(array1, array2) {\n  return isEqual(sortBy(array1), sortBy(array2));\n}\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n}\n\nfunction withTimeoutRejection(_x, _x2) {\n  return _withTimeoutRejection.apply(this, arguments);\n}\n\nfunction _withTimeoutRejection() {\n  _withTimeoutRejection = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee6(promise, timeout) {\n    var sleep;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            sleep = new Promise(function (resolve, reject) {\n              return setTimeout(function () {\n                return reject(new Error(TIMEOUT));\n              }, timeout);\n            });\n            return _context6.abrupt(\"return\", Promise.race([promise, sleep]));\n\n          case 2:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _withTimeoutRejection.apply(this, arguments);\n}\n\nfunction createMetaMaskContext() {\n  var initial = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var Context = React.createContext(initial);\n  Context.displayName = \"MetaMaskContext\";\n  var ContextProvider = Context.Provider;\n\n  var MetaMaskContextProvider =\n  /*#__PURE__*/\n  function (_Component) {\n    _inherits(MetaMaskContextProvider, _Component);\n\n    function MetaMaskContextProvider(props) {\n      var _this2;\n\n      _classCallCheck(this, MetaMaskContextProvider);\n\n      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(MetaMaskContextProvider).call(this, props));\n\n      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), \"handleWatch\",\n      /*#__PURE__*/\n      _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5() {\n        var error, web3, accounts, isLocked, nextState;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (_this2.watcher) {\n                  clearTimeout(_this2.watcher);\n                }\n\n                if (!_this2.state.web3 || !_this2.state.accounts.length) {\n                  _this2.setState({\n                    awaiting: true\n                  });\n                }\n\n                error = _this2.state.error;\n                web3 = null;\n                accounts = [];\n                _context5.prev = 5;\n                isLocked = error && error.message === LOCKED;\n\n                if (!(!_this2.metamask || isLocked)) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                _context5.next = 10;\n                return withTimeoutRejection(MetaMask.initialize(_this2.props.options), _this2.props.timeout);\n\n              case 10:\n                _this2.metamask = _context5.sent;\n\n              case 11:\n                _context5.next = 13;\n                return _this2.metamask.getWeb3();\n\n              case 13:\n                web3 = _context5.sent;\n                _context5.next = 16;\n                return _this2.metamask.getAccounts();\n\n              case 16:\n                accounts = _context5.sent;\n                error = null;\n                _context5.next = 23;\n                break;\n\n              case 20:\n                _context5.prev = 20;\n                _context5.t0 = _context5[\"catch\"](5);\n                error = _context5.t0;\n\n              case 23:\n                if (!error) {\n                  _this2.watcher = setTimeout(_this2.handleWatch, _this2.props.delay);\n                }\n\n                nextState = {\n                  web3: web3,\n                  accounts: accounts,\n                  error: error,\n                  awaiting: false\n                };\n\n                _this2.setState(nextState);\n\n                return _context5.abrupt(\"return\", nextState);\n\n              case 27:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[5, 20]]);\n      })));\n\n      _this2.watcher = null; // timer created with `setTimeout`\n\n      _this2.metamask = null;\n      _this2.state = _objectSpread2({\n        web3: null,\n        accounts: [],\n        awaiting: false,\n        error: null\n      }, props.value);\n      return _this2;\n    }\n\n    _createClass(MetaMaskContextProvider, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.setState({\n          error: MetaMask.hasWeb3() ? null : new Error(NOT_INSTALLED)\n        });\n\n        if (this.props.immediate) {\n          this.handleWatch();\n        }\n      }\n    }, {\n      key: \"shouldComponentUpdate\",\n      value: function shouldComponentUpdate(nextProps, nextState) {\n        if (this.state.awaiting !== nextState.awaiting) {\n          return true;\n        } else if (this.state.web3 !== nextState.web3) {\n          return true;\n        } else if (this.state.error !== nextState.error) {\n          return true;\n        } else if (!isEqualArray(this.state.accounts, nextState.accounts)) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        if (this.watcher) {\n          clearTimeout(this.watcher);\n        }\n      } // eslint-disable-next-line camelcase\n\n    }, {\n      key: \"UNSAFE_componentWillReceiveProps\",\n      value: function UNSAFE_componentWillReceiveProps(nextProps) {\n        if (!isEqual(this.props.options, nextProps.options)) {\n          this.metamask = null;\n        }\n\n        if (nextProps.immediate) {\n          this.handleWatch();\n        } else if (this.watcher) {\n          // nextProps.immediate is false so stop timeout (if present).\n          clearTimeout(this.watcher);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            props = _objectWithoutProperties(_this$props, [\"value\"]);\n\n        var internalValue = {\n          web3: this.state.web3,\n          accounts: this.state.accounts,\n          awaiting: this.state.awaiting,\n          error: this.state.error,\n          openMetaMask: this.handleWatch\n        };\n        return React.createElement(ContextProvider, _extends({}, props, {\n          value: internalValue\n        }));\n      }\n    }]);\n\n    return MetaMaskContextProvider;\n  }(Component);\n\n  _defineProperty(MetaMaskContextProvider, \"propTypes\", {\n    /**\n     * Initial value is an object shaped like { web3, accounts, error, awaiting }\n     */\n    value: PropTypes.any,\n    // eslint-disable-line react/forbid-prop-types\n\n    /**\n     * Refresh interval for MetaMask changes.\n     */\n    delay: PropTypes.number,\n\n    /**\n     * Prevent memory leaks by making the PopUp timeout after some time.\n     * This doesn't close the popup.\n     */\n    timeout: PropTypes.number,\n\n    /**\n     * Start MetaMask when loading the page.\n     */\n    immediate: PropTypes.bool,\n\n    /**\n     * MetaMask class initialize options\n     */\n    options: PropTypes.object\n  });\n\n  _defineProperty(MetaMaskContextProvider, \"defaultProps\", {\n    value: null,\n    delay: 3000,\n    // retry/update every 3 seconds by default\n    timeout: 20000,\n    // wait for user to activate MetaMask.\n    immediate: false,\n    options: undefined\n  });\n\n  Context.Provider = MetaMaskContextProvider;\n  return Context;\n}\n\nfunction withMetaMask(MetaMaskContext) {\n  return function withMetaMaskContext(Comp) {\n    var ComponentWithMetaMask = React.forwardRef(function (props, ref) {\n      return React.createElement(MetaMaskContext.Consumer, null, function (metamask) {\n        return React.createElement(Comp, _extends({\n          ref: ref,\n          metamask: metamask\n        }, props));\n      });\n    });\n    ComponentWithMetaMask.displayName = \"withMetaMask(\".concat(getDisplayName(Comp), \")\");\n    return ComponentWithMetaMask;\n  };\n}\n\nvar PropTypesMetaMask = {\n  web3: PropTypes.object,\n  accounts: PropTypes.arrayOf(PropTypes.string).isRequired,\n  error: PropTypes.object,\n  // `Error` type\n  awaiting: PropTypes.bool.isRequired,\n  openMetaMask: PropTypes.func.isRequired\n};\nvar PropTypesMetaMaskObject = PropTypes.shape(PropTypesMetaMask);\nvar MetaMask$1 = MetaMask;\nvar CONSTANTS = constants;\nexport { CONSTANTS, MetaMask$1 as MetaMask, PropTypesMetaMask, PropTypesMetaMaskObject, createMetaMaskContext, withMetaMask, withTimeoutRejection };","map":null,"metadata":{},"sourceType":"module"}